Everything is garbage collected. If you feel you are leaking RAM horribly, call collectgarbage() for a full GC sweep.

Filenames can only contain the following characters:
	-./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
Furthermore, filenames cannot contain two periods in a row (that is, "..").
The directory separator is a forward slash ("/"). This is to ensure cross-platform portability, and to serve as a reminder that Windows is a pile of shit and that you should be using a Unix-based system instead.

Filenames are case-sensitive.

Note, pathname validity checks (other than the ".." check) are not performed on the client for areas marked as "no access" or "remote".

The following directories have the following meanings:
* pkg/ - Remote on client, local on server, read-only ("packages").
* clsave/pub/ - Client only, local, read-only ("public").
* clsave/vol/ - Client only, local, read-write ("volatile").
* svsave/pub/ - Server only, local, read-only ("public").
* svsave/vol/ - Server only, local, read-write ("volatile").
* anything that doesn't start with these - NO ACCESS WHATSOEVER.

If the server attempts to load something that it has no access to, a Lua error will be thrown.
If the client attempts to load something that isn't local, it will try to fetch it from the server.
BE VERY WARY OF THIS, because if you aren't, a dodgy client can Lua-crash the server.

There are 3 tables you need to be aware of. They are:
* common - Appears on both client and server.
* client - Client only, contains copy of common's contents.
* server - Server only, contains copy of common's contents.

The Lua manual will be useful! It's available here:
	http://lua.org/manual/5.1/

The following libraries are available (TODO: confine it to this):
* base library
* coroutine
* math
* string
* table

The following functions are wrapped (TODO: actually do this):
* dofile(fname) -> return loadfile(fname)()
* loadfile(fname) -> return common.fetch("lua", fname)
* load(func) will forbid Lua bytecode from being executed.
* loadstring(str) will forbid Lua bytecode from being executed.

common.fetch() returns instantly, even for files which need to be loaded from the server.
However, attempting to use the objects before they are loaded will block unless otherwise noted.

#
# Common hooks
#
hook_tick = fn(sec_current, sec_delta):
	Called every logic tick.

#
# Client hooks
#
hook_render = function(sec_current, sec_delta):
	Called every time the screen needs to be redrawn.

hook_mouse = function(x, y, button, state):
	Called every time a mouse button changes state.
	x, y are the position where the mouse changed state.

hook_mouse_focus = function(state):
	### NOT IMPLEMENTED ###
	Called every time the mouse enters (true) or leaves (false) the window.

#
# File handling
#
Formats:
	"png": PNG image
	"lua": Lua script

obj = common.fetch(fmt, fname):
	Loads a file of a given format and returns the correct object.
	Throws an error on failure.

	### TODO: ACTUALLY FETCH OVER THE NETWORK (deferred loading works btw) ###

result = common.is_loaded(obj):
	### NOT IMPLEMENTED ###
	Returns true if the object is fully loaded,
	false if the object is NOT loaded,
	and throws a Lua error on failure.

result = common.is_failure(obj):
	### NOT IMPLEMENTED ###
	Returns true if obj failed to load,
	and false otherwise (even if it is still loading).

obj = common.block(obj):
	Blocks execution until obj is fully loaded.
	Throws an error if obj failed to load properly.
	Returns the object you fed into it.

#
# Drawing
#
Image parameters are either a pointer to an image, or "nil" which refers to the screen.

common.draw_rect_fill(img, x1, y1, x2, y2, color):
	Draws an unblended filled rectangle
	from (x1,y1) to (x2,y2) inclusive,
	using an 0xAARRGGBB color,
	to the image "img".

common.draw_rect_outl(img, x1, y1, x2, y2, color):
	Draws an unblended outlined rectangle
	from (x1,y1) to (x2,y2) inclusive,
	using an 0xAARRGGBB color,
	to the image "img".

#
# Image handling
#
Blit flags:
	BF_AM_DIRECT   = 0: Ignore alpha and just blit directly.
	BF_AM_THRES    = 1: Skip pixels with < 0x80 alpha.
	BF_AM_BLEND    = 2: Use proper alpha blending.
	BF_AM_DITHER   = 3: Use positional dithering.

img = common.img_new(w, h):
	Creates a new, blank image.

w, h = common.img_get_dims(img):
	Returns the dimensions of an image.

common.img_blit(img, dx, dy, flags, sx=0, sy=0, sw=width, sh=height, dest=nil):
	Blits an image to/from either the screen or another image.

	If img is nil, blit from the screen.
	If dest is nil, blit to the screen.

	Note that blitting to/from the screen on the server will throw an error.

#
# Map handling
#
map = common.map_new(w, h):
	Creates a new map used for atmospheric simulation.

common.map_tick_atmos(map):
	Perform an atmospherics simulation tick.

#
# Mouse input
#
Note, button state is an integer.
	To get to each bit one can do this (X being 0-based):
		local button_X_pressed = (b % (2^(X+1))) >= (2^X) -- in Lua
		button_X_pressed = b & (1 << X); // in C
	
	You should have access to a pure Lua library to do this crap for you.

Button state indices:
	MOUSE_LEFT = 0
	MOUSE_MIDDLE = 1
	MOUSE_RIGHT = 2
	MOUSE_SCROLLUP = 3
	MOUSE_SCROLLDN = 4

x, y, dx, dy, b = common.mouse_get():
	Returns the x, y, delta x, delta y, and button state of the mouse.

#
# Turf handling
#
Turf type constants (see src/common.h):
	TURF_WATER    = 0: Nothing but water above and below. Can enter.
	TURF_FLOOR    = 1: Top and bottom protected. Can enter.
	TURF_WALL     = 2: Cannot enter. Water/gas cannot flow.

type = common.turf_get_type(map, x, y):
	Gets the turf type for a given map cell.

common.turf_set_type(map, x, y, type):
	Sets the turf type for a given map cell.

common.turf_reset_gas(map, x, y):
	Resets the gas levels to a type-dependent default for a turf.

val = common.turf_get_gas(map, x, y, type):
	Gets the amount of a type of gas/liquid in a given cell.

common.turf_set_gas(map, x, y, type, val):
	Sets the amount of a type of gas/liquid in a given cell.

